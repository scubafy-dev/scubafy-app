// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// next-auth models (required)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

/// extend your existing User model to match next-auth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // relations for next-auth
  accounts Account[]
  sessions Session[]

  /// keep whatever other fields you already had...
  // fullName           String
  // phoneNumber        String
  // certificationLevel CertificationLevel
  // ...
}

enum Status {
  upcoming
  in_progress
  completed
  cancelled
}

enum Difficulty {
  beginner
  intermediate
  advanced
}

enum VehicleType {
  boat
  speedboat
  catamaran
}

model DiveTrip {
  id          String     @id @default(uuid())
  title       String
  date        DateTime
  location    String
  capacity    Int
  booked      Int
  price       Float
  status      Status
  diveMaster  String
  description String
  duration    String
  difficulty  Difficulty
  center      String? // optional
  instructor  String

  // relations
  vehicle      Vehicle?
  participants Participant[]

  @@map("dive_trips")
}

model Vehicle {
  id       String      @id @default(uuid())
  name     String
  type     VehicleType
  capacity Int

  // one-to-one back to DiveTrip
  diveTrip   DiveTrip @relation(fields: [diveTripId], references: [id])
  diveTripId String   @unique

  @@map("vehicles")
}

model Participant {
  id            String @id @default(uuid())
  name          String
  certification String
  level         String

  // many-to-one back to DiveTrip
  diveTrip   DiveTrip @relation(fields: [diveTripId], references: [id])
  diveTripId String

  @@map("participants")
}

/// new enums for your equipment table
enum EquipmentType {
  BCD
  Regulator
  Wetsuit
  DiveComputer // Suunto D5, etc.
  Fins
}

enum EquipmentStatus {
  available // ‚úÖ
  in_use // ‚è±
  rented // üí≤
  maintenance // ‚ö†Ô∏è
}

enum Condition {
  excellent
  good
  fair
  poor
}

/// new model for each row in your ‚ÄúEquipment Inventory‚Äù table
model Equipment {
  /// e.g. "EQ-D001"
  id           String        @id @default(uuid())
  type         EquipmentType
  brand        String
  model        String
  serialNumber String

  /// purchase info
  purchaseDate DateTime?

  /// service info
  lastService DateTime?
  nextService DateTime?

  /// usage stats (75/100 in your UI)
  usageCount Int?
  usageLimit Int?

  status    EquipmentStatus @default(available)
  condition Condition
  notes     String?

  @@map("equipment")
}

enum CertificationLevel {
  openWater
  advancedOpenWater
  rescue
  diveMaster
  instructor
}

model Customer {
  id                 String              @id @default(uuid())
  fullName           String
  email              String              @unique
  phoneNumber        String?
  certificationLevel CertificationLevel?
  roomNumber         String? // e.g. "101"
  numberOfNights     Int?                @default(0)
  roomCost           Float?              @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

/// enums for fixed dropdowns and checkboxes
enum Gender {
  male
  female
  other
}

enum StaffStatus {
  active
  inactive
  freelance
}

/// each module area they can access
enum Permission {
  diveTrips
  equipment
  tasks
  courseTracker
  finances
  customers
  staff
  reports
  calendar
}

/// join table for Staff ‚Üî Permission (many-to-many)
model StaffPermission {
  staffId    String
  permission Permission

  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@id([staffId, permission])
  @@map("staff_permissions")
}

/// main Staff table
model Staff {
  id          String      @id @default(uuid())
  fullName    String
  email       String      @unique
  phoneNumber String?
  age         Int?
  gender      Gender?
  roleTitle   String?
  status      StaffStatus @default(active)

  address          String?
  emergencyContact String? // ‚ÄúName and phone number‚Äù
  bio              String? // notes

  // permissions via join table
  permissions StaffPermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("staff")
}
