generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// next-auth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  manager
  staff
}

/// extend User model to match next-auth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role?

  diveCenters DiveCenter[]

  createdAt DateTime @default(now())

  // relations for next-auth
  accounts Account[]
  sessions Session[]
  DiveTrip DiveTrip[]
}

model DiveCenter {
  id       String  @id @default(uuid())
  name     String
  location String?
  ownerId  String
  email    String?
  contact  String?

  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  DiveTrip      DiveTrip[]
  fleetVehicles FleetVehicle[]
  customers     Customer[]
  tasks         Task[]
  staff         Staff[]
  courses       Course[]
  equipment     Equipment[]

  @@map("dive_center")
}

enum Status {
  upcoming
  in_progress
  completed
  cancelled
}

enum Difficulty {
  beginner
  intermediate
  advanced
}

enum VehicleType {
  boat
  speedboat
  catamaran
}

// New enum for fleet vehicle types
enum FleetVehicleType {
  boat
  speedboat
  liveaboard
  car
  custom
}

model DiveTrip {
  id          String      @id @default(uuid())
  title       String
  date        DateTime?
  location    String?
  capacity    Int?
  booked      Int?
  price       Float?
  status      Status?
  diveMaster  String?
  description String?
  duration    String?
  difficulty  Difficulty?
  center      String?
  instructor  String?
  diveType    String?

  // relations
  fleetVehicleId String
  fleetVehicle   FleetVehicle  @relation(fields: [fleetVehicleId], references: [id])
  participants   Participant[]
  diveCenterId   String
  diveCenter     DiveCenter    @relation(fields: [diveCenterId], references: [id])
  User           User          @relation(fields: [userId], references: [id])
  userId         String

  // New many-to-many relationships
  instructorAssignments TripInstructorAssignment[]
  diveMasterAssignments TripDiveMasterAssignment[]

  @@map("dive_trips")
}

model Participant {
  id            String  @id @default(uuid())
  name          String
  certification String
  level         String
  customerId    String?

  // many-to-one back to DiveTrip
  diveTrip   DiveTrip @relation(fields: [diveTripId], references: [id])
  diveTripId String

  @@map("participants")
}

enum EquipmentType {
  BCD
  Regulator
  Wetsuit
  DiveComputer // Suunto D5, etc.
  Fins
}

enum EquipmentStatus {
  available
  in_use
  rented
  maintenance
}

enum Condition {
  excellent
  good
  fair
  poor
}

model Equipment {
  /// e.g. "EQ-D001"
  id           String        @id @default(uuid())
  type         EquipmentType
  brand        String
  model        String
  serialNumber String

  purchaseDate DateTime?

  lastService DateTime?
  nextService DateTime?

  /// usage stats (75/100 in UI)
  usageCount Int?
  usageLimit Int?

  rentedToId String?
  rentedTo   Customer? @relation(fields: [rentedToId], references: [id], onDelete: SetNull)
  rentPrice  Float?    @default(0.0)
  rentFrom   DateTime?
  rentTo     DateTime?

  status    EquipmentStatus @default(available)
  condition Condition
  notes     String?

  // Relations
  diveCenterId String
  diveCenter   DiveCenter @relation(fields: [diveCenterId], references: [id], onDelete: Cascade)

  @@map("equipment")
}

enum CertificationLevel {
  openWater
  advancedOpenWater
  rescue
  diveMaster
  instructor
}

model Customer {
  id                 String              @id @default(uuid())
  fullName           String
  email              String              @unique
  phoneNumber        String?
  certificationLevel CertificationLevel?
  roomNumber         String? // e.g. "101"
  numberOfNights     Int?                @default(0)
  roomCost           Float?              @default(0.0)

  // Relations
  diveCenterId String
  diveCenter   DiveCenter  @relation(fields: [diveCenterId], references: [id], onDelete: Cascade)
  Equipment    Equipment[]
  courses      Course[]    @relation("CourseStudents")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

enum Gender {
  male
  female
  other
}

enum StaffStatus {
  active
  inactive
  freelance
}

enum Permission {
  diveTrips
  equipment
  tasks
  courseTracker
  finances
  customers
  staff
  reports
  calendar
}

model StaffPermission {
  staffId    String
  permission Permission

  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@id([staffId, permission])
  @@map("staff_permissions")
}

/// main Staff table
model Staff {
  id          String      @id @default(uuid())
  fullName    String
  email       String      @unique
  phoneNumber String?
  age         Int?
  gender      Gender?
  roleTitle   String?
  status      StaffStatus @default(active)
  salary      Float?

  address          String?
  emergencyContact String? // "Name and phone number"
  bio              String? // notes

  permissions            StaffPermission[]
  vehicleCrewAssignments VehicleCrewAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Task      Task[]

  diveCenterId String?
  diveCenter   DiveCenter? @relation(fields: [diveCenterId], references: [id], onDelete: Cascade)

  // New reverse relationships
  instructorAssignments TripInstructorAssignment[]
  diveMasterAssignments TripDiveMasterAssignment[]

  @@map("staff")
}

enum CourseCertificationLevel {
  openWater
  advancedOpenWater
  rescueDiver
  diveMaster
  instructor
  specialtyCourse
}

enum CourseStatus {
  upcoming
  active
  completed
}

model Course {
  id                 String                    @id @default(uuid())
  title              String
  certificationLevel CourseCertificationLevel?
  status             CourseStatus?
  startDate          DateTime?
  endDate            DateTime?
  instructorName     String?
  instructorContact  String?
  location           String?
  cost               Float?
  specialNeeds       String?
  studentsCount      Int                       @default(0)

  materials          String[]                   // Array of course materials
  equipmentIds       String[]                   // Array of Equipment IDs (from Equipment table)

  diveCenterId String
  diveCenter   DiveCenter @relation(fields: [diveCenterId], references: [id], onDelete: Cascade)

  students Customer[] @relation("CourseStudents")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("courses")
}

enum Priority {
  low
  medium
  high
}

enum TaskStatus {
  pending
  in_progress
  completed
  cancelled
}

enum TaskCategory {
  maintenance
  training
  // add any other categories that app uses
  // administration
  // safety
  // custom
}

model Task {
  id String @id @default(uuid())

  title       String
  description String?

  assignedTo   Staff  @relation(fields: [assignedToId], references: [id], onDelete: Cascade)
  assignedToId String

  dueDate  DateTime
  priority Priority     @default(medium)
  status   TaskStatus   @default(pending)
  category TaskCategory

  diveCenterId String?
  diveCenter   DiveCenter? @relation(fields: [diveCenterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tasks")
}

// New model for fleet vehicle management
model FleetVehicle {
  id                 String           @id @default(uuid())
  name               String
  type               FleetVehicleType
  size               String // e.g., "42 ft" or "SUV"
  capacity           Int
  description        String?
  registrationNumber String?
  insuranceInfo      String?
  imageUrl           String?

  // Relations
  diveCenterId String
  diveCenter   DiveCenter @relation(fields: [diveCenterId], references: [id], onDelete: Cascade)

  // Add reverse relation to DiveTrip
  diveTrips DiveTrip[]

  // Crew assignments
  crewAssignments VehicleCrewAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fleet_vehicles")
}

// Junction table for vehicle crew assignments
model VehicleCrewAssignment {
  id        String  @id @default(uuid())
  vehicleId String
  staffId   String
  role      String? // e.g., "Captain", "Engineer"

  // Relations
  vehicle FleetVehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  staff   Staff        @relation(fields: [staffId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([vehicleId, staffId])
  @@map("vehicle_crew_assignments")
}

// Junction table for trip instructor assignments
model TripInstructorAssignment {
  id        String  @id @default(uuid())
  tripId    String
  staffId   String

  // Relations
  trip   DiveTrip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  staff  Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([tripId, staffId])
  @@map("trip_instructor_assignments")
}

// Junction table for trip dive master assignments
model TripDiveMasterAssignment {
  id        String  @id @default(uuid())
  tripId    String
  staffId   String

  // Relations
  trip   DiveTrip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  staff  Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([tripId, staffId])
  @@map("trip_dive_master_assignments")
}
