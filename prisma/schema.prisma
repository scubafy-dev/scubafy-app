generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// next-auth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

/// extend User model to match next-auth
model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          Role?
  createdAt     DateTime     @default(now())
  accounts      Account[]
  diveCenters   DiveCenter[]
  DiveTrip      DiveTrip[]
  sessions      Session[]
}

model DiveCenter {
  id            String         @id @default(uuid())
  name          String
  location      String?
  ownerId       String
  email         String?
  contact       String?
  courses       Course[]
  customers     Customer[]
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  DiveTrip      DiveTrip[]
  equipment     Equipment[]
  fleetVehicles FleetVehicle[]
  staff         Staff[]
  tasks         Task[]

  @@map("dive_center")
}

model DiveTrip {
  id                    String                     @id @default(uuid())
  title                 String
  date                  DateTime?
  location              String?
  capacity              Int?
  booked                Int?
  price                 Float?
  status                Status?
  diveMaster            String?
  description           String?
  duration              String?
  difficulty            Difficulty?
  center                String?
  instructor            String?
  diveType              String?
  fleetVehicleId        String
  diveCenterId          String
  userId                String
  expenses              Json?
  diveCenter            DiveCenter                 @relation(fields: [diveCenterId], references: [id])
  fleetVehicle          FleetVehicle               @relation(fields: [fleetVehicleId], references: [id])
  User                  User                       @relation(fields: [userId], references: [id])
  participants          Participant[]
  diveMasterAssignments TripDiveMasterAssignment[]
  instructorAssignments TripInstructorAssignment[]

  @@map("dive_trips")
}

model Participant {
  id            String    @id @default(uuid())
  name          String
  certification String
  level         String
  customerId    String?
  diveTripId    String
  customer      Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  diveTrip      DiveTrip  @relation(fields: [diveTripId], references: [id])

  @@map("participants")
}

model Equipment {
  /// e.g. "EQ-D001"
  id                String            @id @default(uuid())
  type              String
  sku               String?
  make              String?
  brand             String
  model             String
  serialNumber      String
  size              String?
  location          String?
  purchaseDate      DateTime?
  lastService       DateTime?
  nextService       DateTime?
  /// usage stats (75/100 in UI)
  usageCount        Int?
  usageLimit        Int?
  rentedToId        String?
  rentPrice         Float?            @default(0.0)
  rentFrom          DateTime?
  rentTo            DateTime?
  status            EquipmentStatus   @default(available)
  condition         Condition
  notes             String?
  diveCenterId      String
  availableQuantity Int               @default(1)
  itemValue         Float?
  minQuantity       Int               @default(0)
  quantity          Int               @default(1)
  rentalRate        Float?
  rentalTimeframe   String?
  rentedQuantity    Int?              @default(1)
  diveCenter        DiveCenter        @relation(fields: [diveCenterId], references: [id], onDelete: Cascade)
  rentedTo          Customer?         @relation(fields: [rentedToId], references: [id])
  equipmentRentals  EquipmentRental[]

  @@map("equipment")
}

model EquipmentRental {
  id          String    @id @default(uuid())
  equipmentId String
  customerId  String
  quantity    Int       @default(1)
  rentPrice   Float     @default(0.0)
  rentFrom    DateTime
  rentTo      DateTime?
  returnedAt  DateTime?
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@map("equipment_rentals")
}

model Customer {
  id                 String              @id @default(uuid())
  fullName           String
  email              String              @unique
  phoneNumber        String?
  certificationLevel CertificationLevel?
  roomNumber         String?
  numberOfNights     Int?                @default(0)
  roomCost           Float?              @default(0.0)
  diveCenterId       String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  courseStudents     CourseStudent[]
  diveCenter         DiveCenter          @relation(fields: [diveCenterId], references: [id], onDelete: Cascade)
  Equipment          Equipment[]
  equipmentRentals   EquipmentRental[]
  participants       Participant[]

  @@map("customers")
}

model StaffPermission {
  staffId    String
  permission Permission
  staff      Staff      @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@id([staffId, permission])
  @@map("staff_permissions")
}

/// main Staff table
model Staff {
  id                     String                     @id @default(uuid())
  fullName               String
  email                  String
  phoneNumber            String?
  age                    Int?
  gender                 Gender?
  roleTitle              String?
  status                 StaffStatus                @default(active)
  salary                 Float?
  staffCode              String?                    @unique
  address                String?
  emergencyContact       String?
  bio                    String?
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @updatedAt
  diveCenterId           String?
  diveCenter             DiveCenter?                @relation(fields: [diveCenterId], references: [id], onDelete: Cascade)
  permissions            StaffPermission[]
  assignments            TaskAssignment[]
  diveMasterAssignments  TripDiveMasterAssignment[]
  instructorAssignments  TripInstructorAssignment[]
  vehicleCrewAssignments VehicleCrewAssignment[]

  @@unique([email, diveCenterId])
  @@map("staff")
}

model CourseStudent {
  id         String    @id @default(uuid())
  courseId   String
  customerId String?
  name       String
  email      String
  course     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  customer   Customer? @relation(fields: [customerId], references: [id])

  @@map("course_students")
}

model Course {
  id                 String                    @id @default(uuid())
  title              String
  certificationLevel CourseCertificationLevel?
  status             CourseStatus?
  startDate          DateTime?
  endDate            DateTime?
  instructorName     String?
  instructorContact  String?
  location           String?
  cost               Float?
  specialNeeds       String?
  studentsCount      Int                       @default(0)
  materials          String[]
  equipmentIds       String[]
  diveCenterId       String
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  students           CourseStudent[]
  diveCenter         DiveCenter                @relation(fields: [diveCenterId], references: [id], onDelete: Cascade)
  expenses           Json?

  @@map("courses")
}

model Task {
  id           String           @id @default(uuid())
  title        String
  description  String?
  dueDate      DateTime
  priority     Priority         @default(medium)
  status       TaskStatus       @default(pending)
  category     TaskCategory
  diveCenterId String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  assignments  TaskAssignment[]
  diveCenter   DiveCenter?      @relation(fields: [diveCenterId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model TaskAssignment {
  id        String   @id @default(uuid())
  taskId    String
  staffId   String
  createdAt DateTime @default(now())
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, staffId])
  @@map("task_assignments")
}

model FleetVehicle {
  id                 String                  @id @default(uuid())
  name               String
  type               FleetVehicleType
  size               String
  capacity           Int
  description        String?
  registrationNumber String?
  insuranceInfo      String?
  imageUrl           String?
  diveCenterId       String
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  diveTrips          DiveTrip[]
  diveCenter         DiveCenter              @relation(fields: [diveCenterId], references: [id], onDelete: Cascade)
  crewAssignments    VehicleCrewAssignment[]

  @@map("fleet_vehicles")
}

model VehicleCrewAssignment {
  id        String       @id @default(uuid())
  vehicleId String
  staffId   String
  role      String?
  createdAt DateTime     @default(now())
  staff     Staff        @relation(fields: [staffId], references: [id], onDelete: Cascade)
  vehicle   FleetVehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@unique([vehicleId, staffId])
  @@map("vehicle_crew_assignments")
}

model TripInstructorAssignment {
  id        String   @id @default(uuid())
  tripId    String
  staffId   String
  createdAt DateTime @default(now())
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  trip      DiveTrip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([tripId, staffId])
  @@map("trip_instructor_assignments")
}

model TripDiveMasterAssignment {
  id        String   @id @default(uuid())
  tripId    String
  staffId   String
  createdAt DateTime @default(now())
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  trip      DiveTrip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([tripId, staffId])
  @@map("trip_dive_master_assignments")
}

enum Role {
  manager
  staff
}

enum Status {
  upcoming
  in_progress
  completed
  cancelled
}

enum Difficulty {
  beginner
  intermediate
  advanced
}

enum VehicleType {
  boat
  speedboat
  catamaran
}

enum FleetVehicleType {
  boat
  speedboat
  liveaboard
  car
  custom
}

enum EquipmentType {
  BCD
  Regulator
  Wetsuit
  DiveComputer
  Fins
}

enum EquipmentStatus {
  available
  in_use
  rented
  maintenance
}

enum Condition {
  excellent
  good
  fair
  poor
}

enum CertificationLevel {
  openWater
  advancedOpenWater
  rescue
  diveMaster
  instructor
}

enum Gender {
  male
  female
  other
}

enum StaffStatus {
  active
  inactive
  freelance
}

enum Permission {
  diveTrips
  equipment
  tasks
  courseTracker
  finances
  customers
  staff
  reports
  calendar
}

enum CourseCertificationLevel {
  openWater
  advancedOpenWater
  rescueDiver
  diveMaster
  instructor
  specialtyCourse
}

enum CourseStatus {
  upcoming
  active
  completed
}

enum Priority {
  low
  medium
  high
}

enum TaskStatus {
  pending
  in_progress
  completed
  cancelled
}

enum TaskCategory {
  maintenance
  training
}
